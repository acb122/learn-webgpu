(()=>{"use strict";var e={961:function(e,t,o){var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(660)),a=n(o(525)),u=new Float32Array([.5,.5,0,1,0,0,1,1,.5,-.5,0,0,1,0,1,0,-.5,-.5,0,0,0,1,0,0,-.5,.5,0,1,1,0,0,1]),c=(new Float32Array([0,0,1,0,.5,1]),new Uint32Array([0,1,3,1,2,3]));window.addEventListener("load",(()=>r(void 0,void 0,void 0,(function*(){!function(){r(this,void 0,void 0,(function*(){const e=document.getElementById("canvas"),t=e.getContext("webgpu"),o=window.devicePixelRatio||1;e.width=e.clientWidth*o,e.height=e.clientHeight*o;const r=navigator.gpu,n=yield r.requestAdapter(),s=yield n.requestDevice(),f=navigator.gpu.getPreferredCanvasFormat();t.configure({device:s,format:f,alphaMode:"opaque"});const l=s.createBuffer({label:"Verticesbuffer",size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});s.queue.writeBuffer(l,0,u);const d=s.createBuffer({label:"indiciesbuffer",size:u.byteLength,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST});s.queue.writeBuffer(d,0,c);const p=s.createRenderPipeline({layout:"auto",vertex:{module:s.createShaderModule({code:i.default}),entryPoint:"main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x3"},{shaderLocation:2,offset:24,format:"float32x2"}],arrayStride:32,stepMode:"vertex"}]},fragment:{module:s.createShaderModule({code:a.default}),entryPoint:"main",targets:[{format:f}]},primitive:{topology:"triangle-list"}}),g={colorAttachments:[{view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},v=yield fetch("/assets/textures/container.jpg"),x=yield createImageBitmap(yield v.blob());console.log(v,x);const m=s.createTexture({size:[x.width,x.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});console.log(m),s.queue.copyExternalImageToTexture({source:x},{texture:m},[x.width,x.height]);const h=s.createSampler({magFilter:"linear",minFilter:"linear"}),y=s.createBindGroup({layout:p.getBindGroupLayout(0),entries:[{binding:0,resource:h},{binding:1,resource:m.createView()}]});g.colorAttachments[0].view=t.getCurrentTexture().createView();const b=s.createCommandEncoder(),w=b.beginRenderPass(g);w.setPipeline(p),w.setVertexBuffer(0,l),w.setIndexBuffer(d,"uint32"),w.setBindGroup(0,y),w.draw(3,1,0,0),w.end(),s.queue.submit([b.finish()]),document.body.appendChild(e)}))}()}))))},525:e=>{e.exports="struct VertexOutput {\n    @builtin(position) position: vec4f,\n    @location(0) vertexColor: vec3f,\n    @location(1) textCoord: vec2f\n};\n\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@fragment\nfn main(input: VertexOutput) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, input.textCoord);\n}"},660:e=>{e.exports="struct VertexOutput {\n    @builtin(position) position: vec4f,\n    @location(0) vertexColor: vec3f,\n    @location(1) textCoord: vec2f\n};\n\n@vertex\nfn main(\n  @location(0) pos: vec3f,\n  @location(1) color: vec3f,\n  @location(2) textCoord: vec2f,\n) -> VertexOutput {\n  var output: VertexOutput;\n  output.position=vec4f(pos, 1.0);\n  output.vertexColor=color;\n  output.textCoord=textCoord;\n  return output;\n}"}},t={};!function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}(961)})();